'''
Run time analysis of each task (Worst case Big O Notation)
Note:   I am not sure about the time complexity of the following:
            csv reader related functions
            format()
            list()
            set()
        I am just going to count them by lines.
'''
################################################################################
# Task 0

import csv
with open('texts.csv', 'r') as f:
    reader = csv.reader(f)
    texts = list(reader)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)

##### O(7)

print('First record of texts, {} texts {} at time {}'.format(*texts[0]))
print('Last record of calls, {} calls {} at time {}, lasting {} seconds'.format(*calls[-1]))

##### O(2)
##### Overall worst case: O(1)

################################################################################
# Task 1

import csv

with open('texts.csv', 'r') as f:
    reader = csv.reader(f)
    texts = list(reader)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)

##### O(7)

phone_nums = []
for text in texts:
    phone_nums += text[0], text[1]
for call in calls:
    phone_nums += call[0], call[1]

number_of_unique_nums = len(set(phone_nums))
print('There are {} different telephone numbers in the records.'.format(number_of_unique_nums))

##### each loop is O(2n), therefore, O(3) + O(2n) + O(2n) -> O(n)
##### Overall worst case: O(n)

################################################################################
Task 2
import csv

with open('texts.csv', 'r') as f:
    reader = csv.reader(f)
    texts = list(reader)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)

##### O(7)

#Declare a dictionary to store phone number vs call length in seconds
call_length_dict = {}

for call in calls:
    #Accumulate seconds for each caller number
    if call[0] not in call_length_dict:
        call_length_dict[call[0]] = int(call[3])
    else:
        call_length_dict[call[0]] += int(call[3])
    #Accumulate seconds for each receiver number
    if call[1] not in call_length_dict:
        call_length_dict[call[1]] = int(call[3])
    else:
        call_length_dict[call[1]] += int(call[3])

##### O(1) + O(6n) -> O(n)

#Search for the phone number with the longest call time
longest_phone_num = max(call_length_dict, key=call_length_dict.get)

##### max() has O(n) and assuming dict.get has O(1), therefore, O(n*1) -> O(n)

print('{} spent the longest time, {} seconds, on the phone during September 2016.'.format(longest_phone_num, call_length_dict[longest_phone_num]))

##### O(1)
##### Overall worst case: O(n)

################################################################################
Task 3

import csv

with open('texts.csv', 'r') as f:
    reader = csv.reader(f)
    texts = list(reader)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)

#Declare empty list to store unique codes or prefixes
codes_by_ba = []

#Declare counter for Bangolore to Bangolore calls
count = 0

##### O(9)

#Extract area codes or prefixes of receiving numbers from calls made by person from Bangalore
for call in calls: ##### O(n)
    if call[0].startswith('(080)'): ##### Not sure about the O() of .startswith(), assume O(1)
        if '(' in call[1]: ##### Not sure about x in string, assume O(1)
            code = call[1][:call[1].find(')')+1] ##### Not sure about the O() of string access and methods, assume O(1)
        elif call[1].startswith('1'):
            code = '140'
        else:
            code = call[1][:4]

        #check for duplicates
        if code not in codes_by_ba: ##### O(n)
            codes_by_ba.append(code) ##### O(1)

        #check if the receiver is also a fixed line from Bangolore
        if call[1].startswith('(080)'):
            count += 1

##### Because 'if code not in codes_by_ba' has O(n) and it's inside of a loop, the worst case of this block of codes: O(n*n) = O(n^2)

#Sort in lexicographic order
codes_by_ba.sort(key=str)

##### Timsort O(nlog(n))

print('The numbers called by people in Bangalore have codes:')
for code in codes_by_ba:
    print(code)

#Calculate the percentage for Part B
per_bang_to_bang = count / len(calls)
print('{:.2%} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.'.format(per_bang_to_bang))

##### O(2n) + O(2) -> O(n)
##### Overall worst case: O(n^2)

################################################################################
Task 4

import csv

with open('texts.csv', 'r') as f:
    reader = csv.reader(f)
    texts = list(reader)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)

#Declare a checked list to store checked numbers
checked_numbers = []

#Declare a list to store telemarketer numbers
telemarketers = []

##### O(9)

for call in calls: ##### O(n)
    #Check if this number has been checked already. If yes, skip; if not, check it.
    if call[0] in checked_numbers: ##### O(n)
        continue
    else:
        checked_numbers.append(call[0]) ##### O(1)
        telemarketers.append(call[0]) ##### O(1)
        #Check if this number ever received calls
        for call_2 in calls: ##### O(n)
            if call_2[1] == call[0]: ##### O(1)
                telemarketers.pop() ##### O(1)
                break

        #Check if this number sent or received text if it passed the received call test
        if call[0] in telemarketers: ##### O(n)
            for text in texts: ##### O(n)
                if text[0] == call[0] or text[1] == call[0]: ##### O(1)
                    telemarketers.pop() ##### O(1)
                    break

##### O(n * (n + 2 + 2n + n + 2n)) -> O(n^2)

#Sort the telemarketers list in lexicographic order
telemarketers.sort(key=str)

##### Timsort O(nlog(n))

print('These numbers could be telemarketers:')
for number in telemarketers:
    print(number)

##### O(1) + O(2n) -> O(n)
##### Overall worst case: O(n^2)
